## 二分查找
适用对象：**有序数组**（由小到大或由大到小）

 - 目标值 T
 - 边界 L = 0 / R = Array.length - 1
 - 中间值 M = (L + R) / 2
   - L > R, return false // 空数值或没找到
   - Array[M] > T, R = M - 1
   - Array[M] < T, L = M + 1
   - Array[M] = T, return M

---

    var arr = [1, 3, 5, 7, 9, 10, 11, 12, 14, 15, 19, 20];
    
    function binarySearch (arr, val) {
        var low = 0,
            high = arr.length - 1;
        while (low <= high) {
            var mid = parseInt( (low + high) / 2 );
            // 防止两个很大的数相加溢出，mid = low + ( high - low >>> 1 )
            if (val == arr[mid]) {
                return mid;
            }else if (val > arr[mid]) {
                low = mid + 1;
            }else if (val < arr[mid]) {
                high = mid - 1;
            }
        }
        return -1;
    };
    console.log( binarySearch(arr, 4) );
